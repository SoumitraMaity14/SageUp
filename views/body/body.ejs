<main>
  <h2>Browse Tutors & Institutes</h2>
  <div id="profiles-container" class="profiles-grid">
    <!-- Profiles injected here -->
  </div>
</main>

<script>
  async function fetchProfiles() {
    try {
      const res = await fetch('/api/profiles');
      if (!res.ok) throw new Error('Failed to fetch profiles');
      const data = await res.json();
      const container = document.getElementById('profiles-container');
      const loggedInUser = JSON.parse(localStorage.getItem('user')); // Get logged-in user info from localStorage

      if (data.profiles.length === 0) {
        container.innerHTML = '<p>No profiles found.</p>';
        return;
      }

      container.innerHTML = data.profiles.map(profile => {
        // Determine if the logged-in user is the owner of the profile
        const isOwner = loggedInUser && loggedInUser.id === profile.user._id;

        return `
          <article class="profile-card">
            <div class="profile-header">
              <h3>${profile.user.name} (${profile.type.replace('_', ' ')})</h3>
              <div class="menu-wrapper">
                ${isOwner ? `<button class="menu-button">⋮</button>
                <div class="menu-dropdown">
                  <button class="edit-btn" data-id="${profile._id}">Edit</button>
                  <button class="delete-btn" data-id="${profile._id}">Delete</button>
                </div>` : ''}
              </div>
            </div>
            <p><strong>Subjects:</strong> ${profile.subjectsOffered.join(', ')}</p>
            <p><strong>Location:</strong> ${profile.location}</p>
            <p><strong>Experience:</strong> ${profile.experience} years</p>
            <p><strong>Fees:</strong> ₹${profile.fees} per hour</p>
            <p><strong>Availability:</strong> ${formatAvailability(profile.availability)}</p>
            <p class="description">${profile.description}</p>
            <p><em>Contact: ${profile.user.email}</em></p>
          </article>
        `;
      }).join('');

      // Dropdown logic
      document.querySelectorAll('.menu-button').forEach(button => {
        button.addEventListener('click', e => {
          e.stopPropagation();
          const dropdown = button.nextElementSibling;
          document.querySelectorAll('.menu-dropdown').forEach(d => d !== dropdown && d.classList.remove('show'));
          dropdown.classList.toggle('show');
        });
      });

      // Close dropdown on outside click
      document.addEventListener('click', () => {
        document.querySelectorAll('.menu-dropdown').forEach(d => d.classList.remove('show'));
      });

      // Delete handler
      document.querySelectorAll('.delete-btn').forEach(btn => {
        btn.addEventListener('click', async e => {
          const id = btn.getAttribute('data-id');
          const confirmDelete = confirm("Are you sure you want to delete this profile?");
          if (!confirmDelete) return;

          try {
            const res = await fetch(`/api/profiles/${id}`, {
              method: 'DELETE',
              headers: { 
                'Authorization': 'Bearer ' + localStorage.getItem('token') 
              }
            });
            if (res.ok) {
              alert('Profile deleted.');
              fetchProfiles(); // refresh the profiles
            } else {
              alert('Failed to delete.');
            }
          } catch (err) {
            console.error(err);
            alert('Server error.');
          }
        });
      });

      // Edit handler
      document.querySelectorAll('.edit-btn').forEach(btn => {
        btn.addEventListener('click', () => {
          const id = btn.getAttribute('data-id');
          window.location.href = `/edit-profile?id=${id}`; // assuming this route exists
        });
      });

    } catch (err) {
      document.getElementById('profiles-container').innerHTML = '<p>Error loading profiles.</p>';
      console.error(err);
    }
  }

  function formatAvailability(availability) {
    if (!availability || !availability.days || !availability.timeSlots) return 'N/A';
    return `${availability.days.join(', ')} at ${availability.timeSlots.join(', ')}`;
  }

  fetchProfiles();
</script>
